//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.02.13 at 12:09:41 PM EST 
//


package org.jboss.mapper.camel.blueprint;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for resequenceDefinition complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="resequenceDefinition">
 *   &lt;complexContent>
 *     &lt;extension base="{http://camel.apache.org/schema/blueprint}processorDefinition">
 *       &lt;sequence>
 *         &lt;choice minOccurs="0">
 *           &lt;element name="batch-config" type="{http://camel.apache.org/schema/blueprint}batchResequencerConfig"/>
 *           &lt;element name="stream-config" type="{http://camel.apache.org/schema/blueprint}streamResequencerConfig"/>
 *         &lt;/choice>
 *         &lt;choice>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}expressionDefinition"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}constant"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}el"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}groovy"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}header"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}jxpath"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}javaScript"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}jsonpath"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}language"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}method"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}mvel"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}ognl"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}php"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}property"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}python"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}ref"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}ruby"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}simple"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}spel"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}sql"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}tokenize"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}vtdxml"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}xtokenize"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}xpath"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}xquery"/>
 *         &lt;/choice>
 *         &lt;choice maxOccurs="unbounded" minOccurs="0">
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}onException"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}when"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}onCompletion"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}intercept"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}interceptFrom"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}interceptToEndpoint"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}to"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}route"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}aop"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}aggregate"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}bean"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}doCatch"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}choice"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}otherwise"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}convertBodyTo"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}delay"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}dynamicRouter"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}enrich"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}filter"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}doFinally"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}idempotentConsumer"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}inOnly"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}inOut"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}loadBalance"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}log"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}loop"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}marshal"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}multicast"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}pipeline"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}policy"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}pollEnrich"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}process"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}recipientList"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}removeHeader"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}removeHeaders"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}removeProperty"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}resequence"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}rollback"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}routingSlip"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}sample"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}setBody"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}setExchangePattern"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}setFaultBody"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}setHeader"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}setOutHeader"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}setProperty"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}sort"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}split"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}stop"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}threads"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}throttle"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}throwException"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}transacted"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}transform"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}doTry"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}unmarshal"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}validate"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}wireTap"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}restBinding"/>
 *         &lt;/choice>
 *       &lt;/sequence>
 *       &lt;anyAttribute processContents='skip' namespace='##other'/>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "resequenceDefinition", propOrder = {
    "batchConfig",
    "streamConfig",
    "expressionDefinition",
    "constant",
    "el",
    "groovy",
    "header",
    "jxpath",
    "javaScript",
    "jsonpath",
    "language",
    "method",
    "mvel",
    "ognl",
    "php",
    "property",
    "python",
    "ref",
    "ruby",
    "simple",
    "spel",
    "sql",
    "tokenize",
    "vtdxml",
    "xtokenize",
    "xpath",
    "xquery",
    "onExceptionOrWhenOrOnCompletion"
})
public class ResequenceDefinition
    extends ProcessorDefinition
{

    @XmlElement(name = "batch-config")
    protected BatchResequencerConfig batchConfig;
    @XmlElement(name = "stream-config")
    protected StreamResequencerConfig streamConfig;
    protected Expression expressionDefinition;
    protected ConstantExpression constant;
    protected ElExpression el;
    protected GroovyExpression groovy;
    protected HeaderExpression header;
    protected JxPathExpression jxpath;
    protected JavaScriptExpression javaScript;
    protected JsonPathExpression jsonpath;
    protected LanguageExpression language;
    protected MethodCallExpression method;
    protected MvelExpression mvel;
    protected OgnlExpression ognl;
    protected PhpExpression php;
    @XmlElement(nillable = true)
    protected Object property;
    protected PythonExpression python;
    protected RefExpression ref;
    protected RubyExpression ruby;
    protected SimpleExpression simple;
    protected SpELExpression spel;
    protected SqlExpression sql;
    protected TokenizerExpression tokenize;
    protected VtdXmlExpression vtdxml;
    protected XmlTokenizerExpression xtokenize;
    protected XPathExpression xpath;
    protected XQueryExpression xquery;
    @XmlElements({
        @XmlElement(name = "onException", type = OnExceptionDefinition.class),
        @XmlElement(name = "when", type = WhenDefinition.class),
        @XmlElement(name = "onCompletion", type = OnCompletionDefinition.class),
        @XmlElement(name = "intercept", type = InterceptDefinition.class),
        @XmlElement(name = "interceptFrom", type = InterceptFromDefinition.class),
        @XmlElement(name = "interceptToEndpoint", type = InterceptSendToEndpointDefinition.class),
        @XmlElement(name = "to", type = ToDefinition.class),
        @XmlElement(name = "route", type = RouteDefinition.class),
        @XmlElement(name = "aop", type = AopDefinition.class),
        @XmlElement(name = "aggregate", type = AggregateDefinition.class),
        @XmlElement(name = "bean", type = BeanDefinition.class),
        @XmlElement(name = "doCatch", type = CatchDefinition.class),
        @XmlElement(name = "choice", type = ChoiceDefinition.class),
        @XmlElement(name = "otherwise", type = OtherwiseDefinition.class),
        @XmlElement(name = "convertBodyTo", type = ConvertBodyDefinition.class),
        @XmlElement(name = "delay", type = DelayDefinition.class),
        @XmlElement(name = "dynamicRouter", type = DynamicRouterDefinition.class),
        @XmlElement(name = "enrich", type = EnrichDefinition.class),
        @XmlElement(name = "filter", type = FilterDefinition.class),
        @XmlElement(name = "doFinally", type = FinallyDefinition.class),
        @XmlElement(name = "idempotentConsumer", type = IdempotentConsumerDefinition.class),
        @XmlElement(name = "inOnly", type = InOnlyDefinition.class),
        @XmlElement(name = "inOut", type = InOutDefinition.class),
        @XmlElement(name = "loadBalance", type = LoadBalanceDefinition.class),
        @XmlElement(name = "log", type = LogDefinition.class),
        @XmlElement(name = "loop", type = LoopDefinition.class),
        @XmlElement(name = "marshal", type = MarshalDefinition.class),
        @XmlElement(name = "multicast", type = MulticastDefinition.class),
        @XmlElement(name = "pipeline", type = PipelineDefinition.class),
        @XmlElement(name = "policy", type = PolicyDefinition.class),
        @XmlElement(name = "pollEnrich", type = PollEnrichDefinition.class),
        @XmlElement(name = "process", type = ProcessDefinition.class),
        @XmlElement(name = "recipientList", type = RecipientListDefinition.class),
        @XmlElement(name = "removeHeader", type = RemoveHeaderDefinition.class),
        @XmlElement(name = "removeHeaders", type = RemoveHeadersDefinition.class),
        @XmlElement(name = "removeProperty", type = RemovePropertyDefinition.class),
        @XmlElement(name = "resequence", type = ResequenceDefinition.class),
        @XmlElement(name = "rollback", type = RollbackDefinition.class),
        @XmlElement(name = "routingSlip", type = RoutingSlipDefinition.class),
        @XmlElement(name = "sample", type = SamplingDefinition.class),
        @XmlElement(name = "setBody", type = SetBodyDefinition.class),
        @XmlElement(name = "setExchangePattern", type = SetExchangePatternDefinition.class),
        @XmlElement(name = "setFaultBody", type = SetFaultBodyDefinition.class),
        @XmlElement(name = "setHeader", type = SetHeaderDefinition.class),
        @XmlElement(name = "setOutHeader", type = SetOutHeaderDefinition.class),
        @XmlElement(name = "setProperty", type = SetPropertyDefinition.class),
        @XmlElement(name = "sort", type = SortDefinition.class),
        @XmlElement(name = "split", type = SplitDefinition.class),
        @XmlElement(name = "stop", type = StopDefinition.class),
        @XmlElement(name = "threads", type = ThreadsDefinition.class),
        @XmlElement(name = "throttle", type = ThrottleDefinition.class),
        @XmlElement(name = "throwException", type = ThrowExceptionDefinition.class),
        @XmlElement(name = "transacted", type = TransactedDefinition.class),
        @XmlElement(name = "transform", type = TransformDefinition.class),
        @XmlElement(name = "doTry", type = TryDefinition.class),
        @XmlElement(name = "unmarshal", type = UnmarshalDefinition.class),
        @XmlElement(name = "validate", type = ValidateDefinition.class),
        @XmlElement(name = "wireTap", type = WireTapDefinition.class),
        @XmlElement(name = "restBinding", type = RestBindingDefinition.class)
    })
    protected List<ProcessorDefinition> onExceptionOrWhenOrOnCompletion;

    /**
     * Gets the value of the batchConfig property.
     * 
     * @return
     *     possible object is
     *     {@link BatchResequencerConfig }
     *     
     */
    public BatchResequencerConfig getBatchConfig() {
        return batchConfig;
    }

    /**
     * Sets the value of the batchConfig property.
     * 
     * @param value
     *     allowed object is
     *     {@link BatchResequencerConfig }
     *     
     */
    public void setBatchConfig(BatchResequencerConfig value) {
        this.batchConfig = value;
    }

    /**
     * Gets the value of the streamConfig property.
     * 
     * @return
     *     possible object is
     *     {@link StreamResequencerConfig }
     *     
     */
    public StreamResequencerConfig getStreamConfig() {
        return streamConfig;
    }

    /**
     * Sets the value of the streamConfig property.
     * 
     * @param value
     *     allowed object is
     *     {@link StreamResequencerConfig }
     *     
     */
    public void setStreamConfig(StreamResequencerConfig value) {
        this.streamConfig = value;
    }

    /**
     * Gets the value of the expressionDefinition property.
     * 
     * @return
     *     possible object is
     *     {@link Expression }
     *     
     */
    public Expression getExpressionDefinition() {
        return expressionDefinition;
    }

    /**
     * Sets the value of the expressionDefinition property.
     * 
     * @param value
     *     allowed object is
     *     {@link Expression }
     *     
     */
    public void setExpressionDefinition(Expression value) {
        this.expressionDefinition = value;
    }

    /**
     * Gets the value of the constant property.
     * 
     * @return
     *     possible object is
     *     {@link ConstantExpression }
     *     
     */
    public ConstantExpression getConstant() {
        return constant;
    }

    /**
     * Sets the value of the constant property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConstantExpression }
     *     
     */
    public void setConstant(ConstantExpression value) {
        this.constant = value;
    }

    /**
     * Gets the value of the el property.
     * 
     * @return
     *     possible object is
     *     {@link ElExpression }
     *     
     */
    public ElExpression getEl() {
        return el;
    }

    /**
     * Sets the value of the el property.
     * 
     * @param value
     *     allowed object is
     *     {@link ElExpression }
     *     
     */
    public void setEl(ElExpression value) {
        this.el = value;
    }

    /**
     * Gets the value of the groovy property.
     * 
     * @return
     *     possible object is
     *     {@link GroovyExpression }
     *     
     */
    public GroovyExpression getGroovy() {
        return groovy;
    }

    /**
     * Sets the value of the groovy property.
     * 
     * @param value
     *     allowed object is
     *     {@link GroovyExpression }
     *     
     */
    public void setGroovy(GroovyExpression value) {
        this.groovy = value;
    }

    /**
     * Gets the value of the header property.
     * 
     * @return
     *     possible object is
     *     {@link HeaderExpression }
     *     
     */
    public HeaderExpression getHeader() {
        return header;
    }

    /**
     * Sets the value of the header property.
     * 
     * @param value
     *     allowed object is
     *     {@link HeaderExpression }
     *     
     */
    public void setHeader(HeaderExpression value) {
        this.header = value;
    }

    /**
     * Gets the value of the jxpath property.
     * 
     * @return
     *     possible object is
     *     {@link JxPathExpression }
     *     
     */
    public JxPathExpression getJxpath() {
        return jxpath;
    }

    /**
     * Sets the value of the jxpath property.
     * 
     * @param value
     *     allowed object is
     *     {@link JxPathExpression }
     *     
     */
    public void setJxpath(JxPathExpression value) {
        this.jxpath = value;
    }

    /**
     * Gets the value of the javaScript property.
     * 
     * @return
     *     possible object is
     *     {@link JavaScriptExpression }
     *     
     */
    public JavaScriptExpression getJavaScript() {
        return javaScript;
    }

    /**
     * Sets the value of the javaScript property.
     * 
     * @param value
     *     allowed object is
     *     {@link JavaScriptExpression }
     *     
     */
    public void setJavaScript(JavaScriptExpression value) {
        this.javaScript = value;
    }

    /**
     * Gets the value of the jsonpath property.
     * 
     * @return
     *     possible object is
     *     {@link JsonPathExpression }
     *     
     */
    public JsonPathExpression getJsonpath() {
        return jsonpath;
    }

    /**
     * Sets the value of the jsonpath property.
     * 
     * @param value
     *     allowed object is
     *     {@link JsonPathExpression }
     *     
     */
    public void setJsonpath(JsonPathExpression value) {
        this.jsonpath = value;
    }

    /**
     * Gets the value of the language property.
     * 
     * @return
     *     possible object is
     *     {@link LanguageExpression }
     *     
     */
    public LanguageExpression getLanguage() {
        return language;
    }

    /**
     * Sets the value of the language property.
     * 
     * @param value
     *     allowed object is
     *     {@link LanguageExpression }
     *     
     */
    public void setLanguage(LanguageExpression value) {
        this.language = value;
    }

    /**
     * Gets the value of the method property.
     * 
     * @return
     *     possible object is
     *     {@link MethodCallExpression }
     *     
     */
    public MethodCallExpression getMethod() {
        return method;
    }

    /**
     * Sets the value of the method property.
     * 
     * @param value
     *     allowed object is
     *     {@link MethodCallExpression }
     *     
     */
    public void setMethod(MethodCallExpression value) {
        this.method = value;
    }

    /**
     * Gets the value of the mvel property.
     * 
     * @return
     *     possible object is
     *     {@link MvelExpression }
     *     
     */
    public MvelExpression getMvel() {
        return mvel;
    }

    /**
     * Sets the value of the mvel property.
     * 
     * @param value
     *     allowed object is
     *     {@link MvelExpression }
     *     
     */
    public void setMvel(MvelExpression value) {
        this.mvel = value;
    }

    /**
     * Gets the value of the ognl property.
     * 
     * @return
     *     possible object is
     *     {@link OgnlExpression }
     *     
     */
    public OgnlExpression getOgnl() {
        return ognl;
    }

    /**
     * Sets the value of the ognl property.
     * 
     * @param value
     *     allowed object is
     *     {@link OgnlExpression }
     *     
     */
    public void setOgnl(OgnlExpression value) {
        this.ognl = value;
    }

    /**
     * Gets the value of the php property.
     * 
     * @return
     *     possible object is
     *     {@link PhpExpression }
     *     
     */
    public PhpExpression getPhp() {
        return php;
    }

    /**
     * Sets the value of the php property.
     * 
     * @param value
     *     allowed object is
     *     {@link PhpExpression }
     *     
     */
    public void setPhp(PhpExpression value) {
        this.php = value;
    }

    /**
     * Gets the value of the property property.
     * 
     * @return
     *     possible object is
     *     {@link Object }
     *     
     */
    public Object getProperty() {
        return property;
    }

    /**
     * Sets the value of the property property.
     * 
     * @param value
     *     allowed object is
     *     {@link Object }
     *     
     */
    public void setProperty(Object value) {
        this.property = value;
    }

    /**
     * Gets the value of the python property.
     * 
     * @return
     *     possible object is
     *     {@link PythonExpression }
     *     
     */
    public PythonExpression getPython() {
        return python;
    }

    /**
     * Sets the value of the python property.
     * 
     * @param value
     *     allowed object is
     *     {@link PythonExpression }
     *     
     */
    public void setPython(PythonExpression value) {
        this.python = value;
    }

    /**
     * Gets the value of the ref property.
     * 
     * @return
     *     possible object is
     *     {@link RefExpression }
     *     
     */
    public RefExpression getRef() {
        return ref;
    }

    /**
     * Sets the value of the ref property.
     * 
     * @param value
     *     allowed object is
     *     {@link RefExpression }
     *     
     */
    public void setRef(RefExpression value) {
        this.ref = value;
    }

    /**
     * Gets the value of the ruby property.
     * 
     * @return
     *     possible object is
     *     {@link RubyExpression }
     *     
     */
    public RubyExpression getRuby() {
        return ruby;
    }

    /**
     * Sets the value of the ruby property.
     * 
     * @param value
     *     allowed object is
     *     {@link RubyExpression }
     *     
     */
    public void setRuby(RubyExpression value) {
        this.ruby = value;
    }

    /**
     * Gets the value of the simple property.
     * 
     * @return
     *     possible object is
     *     {@link SimpleExpression }
     *     
     */
    public SimpleExpression getSimple() {
        return simple;
    }

    /**
     * Sets the value of the simple property.
     * 
     * @param value
     *     allowed object is
     *     {@link SimpleExpression }
     *     
     */
    public void setSimple(SimpleExpression value) {
        this.simple = value;
    }

    /**
     * Gets the value of the spel property.
     * 
     * @return
     *     possible object is
     *     {@link SpELExpression }
     *     
     */
    public SpELExpression getSpel() {
        return spel;
    }

    /**
     * Sets the value of the spel property.
     * 
     * @param value
     *     allowed object is
     *     {@link SpELExpression }
     *     
     */
    public void setSpel(SpELExpression value) {
        this.spel = value;
    }

    /**
     * Gets the value of the sql property.
     * 
     * @return
     *     possible object is
     *     {@link SqlExpression }
     *     
     */
    public SqlExpression getSql() {
        return sql;
    }

    /**
     * Sets the value of the sql property.
     * 
     * @param value
     *     allowed object is
     *     {@link SqlExpression }
     *     
     */
    public void setSql(SqlExpression value) {
        this.sql = value;
    }

    /**
     * Gets the value of the tokenize property.
     * 
     * @return
     *     possible object is
     *     {@link TokenizerExpression }
     *     
     */
    public TokenizerExpression getTokenize() {
        return tokenize;
    }

    /**
     * Sets the value of the tokenize property.
     * 
     * @param value
     *     allowed object is
     *     {@link TokenizerExpression }
     *     
     */
    public void setTokenize(TokenizerExpression value) {
        this.tokenize = value;
    }

    /**
     * Gets the value of the vtdxml property.
     * 
     * @return
     *     possible object is
     *     {@link VtdXmlExpression }
     *     
     */
    public VtdXmlExpression getVtdxml() {
        return vtdxml;
    }

    /**
     * Sets the value of the vtdxml property.
     * 
     * @param value
     *     allowed object is
     *     {@link VtdXmlExpression }
     *     
     */
    public void setVtdxml(VtdXmlExpression value) {
        this.vtdxml = value;
    }

    /**
     * Gets the value of the xtokenize property.
     * 
     * @return
     *     possible object is
     *     {@link XmlTokenizerExpression }
     *     
     */
    public XmlTokenizerExpression getXtokenize() {
        return xtokenize;
    }

    /**
     * Sets the value of the xtokenize property.
     * 
     * @param value
     *     allowed object is
     *     {@link XmlTokenizerExpression }
     *     
     */
    public void setXtokenize(XmlTokenizerExpression value) {
        this.xtokenize = value;
    }

    /**
     * Gets the value of the xpath property.
     * 
     * @return
     *     possible object is
     *     {@link XPathExpression }
     *     
     */
    public XPathExpression getXpath() {
        return xpath;
    }

    /**
     * Sets the value of the xpath property.
     * 
     * @param value
     *     allowed object is
     *     {@link XPathExpression }
     *     
     */
    public void setXpath(XPathExpression value) {
        this.xpath = value;
    }

    /**
     * Gets the value of the xquery property.
     * 
     * @return
     *     possible object is
     *     {@link XQueryExpression }
     *     
     */
    public XQueryExpression getXquery() {
        return xquery;
    }

    /**
     * Sets the value of the xquery property.
     * 
     * @param value
     *     allowed object is
     *     {@link XQueryExpression }
     *     
     */
    public void setXquery(XQueryExpression value) {
        this.xquery = value;
    }

    /**
     * Gets the value of the onExceptionOrWhenOrOnCompletion property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the onExceptionOrWhenOrOnCompletion property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getOnExceptionOrWhenOrOnCompletion().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link OnExceptionDefinition }
     * {@link WhenDefinition }
     * {@link OnCompletionDefinition }
     * {@link InterceptDefinition }
     * {@link InterceptFromDefinition }
     * {@link InterceptSendToEndpointDefinition }
     * {@link ToDefinition }
     * {@link RouteDefinition }
     * {@link AopDefinition }
     * {@link AggregateDefinition }
     * {@link BeanDefinition }
     * {@link CatchDefinition }
     * {@link ChoiceDefinition }
     * {@link OtherwiseDefinition }
     * {@link ConvertBodyDefinition }
     * {@link DelayDefinition }
     * {@link DynamicRouterDefinition }
     * {@link EnrichDefinition }
     * {@link FilterDefinition }
     * {@link FinallyDefinition }
     * {@link IdempotentConsumerDefinition }
     * {@link InOnlyDefinition }
     * {@link InOutDefinition }
     * {@link LoadBalanceDefinition }
     * {@link LogDefinition }
     * {@link LoopDefinition }
     * {@link MarshalDefinition }
     * {@link MulticastDefinition }
     * {@link PipelineDefinition }
     * {@link PolicyDefinition }
     * {@link PollEnrichDefinition }
     * {@link ProcessDefinition }
     * {@link RecipientListDefinition }
     * {@link RemoveHeaderDefinition }
     * {@link RemoveHeadersDefinition }
     * {@link RemovePropertyDefinition }
     * {@link ResequenceDefinition }
     * {@link RollbackDefinition }
     * {@link RoutingSlipDefinition }
     * {@link SamplingDefinition }
     * {@link SetBodyDefinition }
     * {@link SetExchangePatternDefinition }
     * {@link SetFaultBodyDefinition }
     * {@link SetHeaderDefinition }
     * {@link SetOutHeaderDefinition }
     * {@link SetPropertyDefinition }
     * {@link SortDefinition }
     * {@link SplitDefinition }
     * {@link StopDefinition }
     * {@link ThreadsDefinition }
     * {@link ThrottleDefinition }
     * {@link ThrowExceptionDefinition }
     * {@link TransactedDefinition }
     * {@link TransformDefinition }
     * {@link TryDefinition }
     * {@link UnmarshalDefinition }
     * {@link ValidateDefinition }
     * {@link WireTapDefinition }
     * {@link RestBindingDefinition }
     * 
     * 
     */
    public List<ProcessorDefinition> getOnExceptionOrWhenOrOnCompletion() {
        if (onExceptionOrWhenOrOnCompletion == null) {
            onExceptionOrWhenOrOnCompletion = new ArrayList<ProcessorDefinition>();
        }
        return this.onExceptionOrWhenOrOnCompletion;
    }

}
