//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.11.26 at 02:37:57 PM EST 
//


package org.jboss.mapper.camel.spring;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for exchangePattern.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="exchangePattern">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="OutIn"/>
 *     &lt;enumeration value="OutOnly"/>
 *     &lt;enumeration value="InOptionalOut"/>
 *     &lt;enumeration value="InOut"/>
 *     &lt;enumeration value="RobustInOnly"/>
 *     &lt;enumeration value="InOnly"/>
 *     &lt;enumeration value="RobustOutOnly"/>
 *     &lt;enumeration value="OutOptionalIn"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "exchangePattern")
@XmlEnum
public enum ExchangePattern {

    @XmlEnumValue("OutIn")
    OUT_IN("OutIn"),
    @XmlEnumValue("OutOnly")
    OUT_ONLY("OutOnly"),
    @XmlEnumValue("InOptionalOut")
    IN_OPTIONAL_OUT("InOptionalOut"),
    @XmlEnumValue("InOut")
    IN_OUT("InOut"),
    @XmlEnumValue("RobustInOnly")
    ROBUST_IN_ONLY("RobustInOnly"),
    @XmlEnumValue("InOnly")
    IN_ONLY("InOnly"),
    @XmlEnumValue("RobustOutOnly")
    ROBUST_OUT_ONLY("RobustOutOnly"),
    @XmlEnumValue("OutOptionalIn")
    OUT_OPTIONAL_IN("OutOptionalIn");
    private final String value;

    ExchangePattern(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ExchangePattern fromValue(String v) {
        for (ExchangePattern c: ExchangePattern.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
