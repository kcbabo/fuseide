//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.02.13 at 12:09:41 PM EST 
//


package org.jboss.mapper.camel.blueprint;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for aggregateDefinition complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="aggregateDefinition">
 *   &lt;complexContent>
 *     &lt;extension base="{http://camel.apache.org/schema/blueprint}processorDefinition">
 *       &lt;sequence>
 *         &lt;element name="correlationExpression" type="{http://camel.apache.org/schema/blueprint}expressionSubElementDefinition"/>
 *         &lt;element name="completionPredicate" type="{http://camel.apache.org/schema/blueprint}expressionSubElementDefinition" minOccurs="0"/>
 *         &lt;element name="completionTimeout" type="{http://camel.apache.org/schema/blueprint}expressionSubElementDefinition" minOccurs="0"/>
 *         &lt;element name="completionSize" type="{http://camel.apache.org/schema/blueprint}expressionSubElementDefinition" minOccurs="0"/>
 *         &lt;element ref="{http://camel.apache.org/schema/blueprint}optimisticLockRetryPolicy" minOccurs="0"/>
 *         &lt;choice maxOccurs="unbounded" minOccurs="0">
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}onException"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}when"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}onCompletion"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}intercept"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}interceptFrom"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}interceptToEndpoint"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}to"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}route"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}aop"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}aggregate"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}bean"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}doCatch"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}choice"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}otherwise"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}convertBodyTo"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}delay"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}dynamicRouter"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}enrich"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}filter"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}doFinally"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}idempotentConsumer"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}inOnly"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}inOut"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}loadBalance"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}log"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}loop"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}marshal"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}multicast"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}pipeline"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}policy"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}pollEnrich"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}process"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}recipientList"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}removeHeader"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}removeHeaders"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}removeProperty"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}resequence"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}rollback"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}routingSlip"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}sample"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}setBody"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}setExchangePattern"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}setFaultBody"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}setHeader"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}setOutHeader"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}setProperty"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}sort"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}split"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}stop"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}threads"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}throttle"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}throwException"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}transacted"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}transform"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}doTry"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}unmarshal"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}validate"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}wireTap"/>
 *           &lt;element ref="{http://camel.apache.org/schema/blueprint}restBinding"/>
 *         &lt;/choice>
 *       &lt;/sequence>
 *       &lt;attribute name="parallelProcessing" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="optimisticLocking" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="executorServiceRef" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="timeoutCheckerExecutorServiceRef" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="aggregationRepositoryRef" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="strategyRef" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="strategyMethodName" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="strategyMethodAllowNull" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="completionSize" type="{http://www.w3.org/2001/XMLSchema}int" />
 *       &lt;attribute name="completionInterval" type="{http://www.w3.org/2001/XMLSchema}long" />
 *       &lt;attribute name="completionTimeout" type="{http://www.w3.org/2001/XMLSchema}long" />
 *       &lt;attribute name="completionFromBatchConsumer" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="groupExchanges" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="eagerCheckCompletion" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="ignoreInvalidCorrelationKeys" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="closeCorrelationKeyOnCompletion" type="{http://www.w3.org/2001/XMLSchema}int" />
 *       &lt;attribute name="discardOnCompletionTimeout" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="forceCompletionOnStop" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;anyAttribute processContents='skip' namespace='##other'/>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "aggregateDefinition", propOrder = {
    "correlationExpression",
    "completionPredicate",
    "completionTimeout",
    "completionSize",
    "optimisticLockRetryPolicy",
    "onExceptionOrWhenOrOnCompletion"
})
public class AggregateDefinition
    extends ProcessorDefinition
{

    @XmlElement(required = true)
    protected ExpressionSubElementDefinition correlationExpression;
    protected ExpressionSubElementDefinition completionPredicate;
    protected ExpressionSubElementDefinition completionTimeout;
    protected ExpressionSubElementDefinition completionSize;
    protected OptimisticLockRetryPolicyDefinition optimisticLockRetryPolicy;
    @XmlElements({
        @XmlElement(name = "onException", type = OnExceptionDefinition.class),
        @XmlElement(name = "when", type = WhenDefinition.class),
        @XmlElement(name = "onCompletion", type = OnCompletionDefinition.class),
        @XmlElement(name = "intercept", type = InterceptDefinition.class),
        @XmlElement(name = "interceptFrom", type = InterceptFromDefinition.class),
        @XmlElement(name = "interceptToEndpoint", type = InterceptSendToEndpointDefinition.class),
        @XmlElement(name = "to", type = ToDefinition.class),
        @XmlElement(name = "route", type = RouteDefinition.class),
        @XmlElement(name = "aop", type = AopDefinition.class),
        @XmlElement(name = "aggregate", type = AggregateDefinition.class),
        @XmlElement(name = "bean", type = BeanDefinition.class),
        @XmlElement(name = "doCatch", type = CatchDefinition.class),
        @XmlElement(name = "choice", type = ChoiceDefinition.class),
        @XmlElement(name = "otherwise", type = OtherwiseDefinition.class),
        @XmlElement(name = "convertBodyTo", type = ConvertBodyDefinition.class),
        @XmlElement(name = "delay", type = DelayDefinition.class),
        @XmlElement(name = "dynamicRouter", type = DynamicRouterDefinition.class),
        @XmlElement(name = "enrich", type = EnrichDefinition.class),
        @XmlElement(name = "filter", type = FilterDefinition.class),
        @XmlElement(name = "doFinally", type = FinallyDefinition.class),
        @XmlElement(name = "idempotentConsumer", type = IdempotentConsumerDefinition.class),
        @XmlElement(name = "inOnly", type = InOnlyDefinition.class),
        @XmlElement(name = "inOut", type = InOutDefinition.class),
        @XmlElement(name = "loadBalance", type = LoadBalanceDefinition.class),
        @XmlElement(name = "log", type = LogDefinition.class),
        @XmlElement(name = "loop", type = LoopDefinition.class),
        @XmlElement(name = "marshal", type = MarshalDefinition.class),
        @XmlElement(name = "multicast", type = MulticastDefinition.class),
        @XmlElement(name = "pipeline", type = PipelineDefinition.class),
        @XmlElement(name = "policy", type = PolicyDefinition.class),
        @XmlElement(name = "pollEnrich", type = PollEnrichDefinition.class),
        @XmlElement(name = "process", type = ProcessDefinition.class),
        @XmlElement(name = "recipientList", type = RecipientListDefinition.class),
        @XmlElement(name = "removeHeader", type = RemoveHeaderDefinition.class),
        @XmlElement(name = "removeHeaders", type = RemoveHeadersDefinition.class),
        @XmlElement(name = "removeProperty", type = RemovePropertyDefinition.class),
        @XmlElement(name = "resequence", type = ResequenceDefinition.class),
        @XmlElement(name = "rollback", type = RollbackDefinition.class),
        @XmlElement(name = "routingSlip", type = RoutingSlipDefinition.class),
        @XmlElement(name = "sample", type = SamplingDefinition.class),
        @XmlElement(name = "setBody", type = SetBodyDefinition.class),
        @XmlElement(name = "setExchangePattern", type = SetExchangePatternDefinition.class),
        @XmlElement(name = "setFaultBody", type = SetFaultBodyDefinition.class),
        @XmlElement(name = "setHeader", type = SetHeaderDefinition.class),
        @XmlElement(name = "setOutHeader", type = SetOutHeaderDefinition.class),
        @XmlElement(name = "setProperty", type = SetPropertyDefinition.class),
        @XmlElement(name = "sort", type = SortDefinition.class),
        @XmlElement(name = "split", type = SplitDefinition.class),
        @XmlElement(name = "stop", type = StopDefinition.class),
        @XmlElement(name = "threads", type = ThreadsDefinition.class),
        @XmlElement(name = "throttle", type = ThrottleDefinition.class),
        @XmlElement(name = "throwException", type = ThrowExceptionDefinition.class),
        @XmlElement(name = "transacted", type = TransactedDefinition.class),
        @XmlElement(name = "transform", type = TransformDefinition.class),
        @XmlElement(name = "doTry", type = TryDefinition.class),
        @XmlElement(name = "unmarshal", type = UnmarshalDefinition.class),
        @XmlElement(name = "validate", type = ValidateDefinition.class),
        @XmlElement(name = "wireTap", type = WireTapDefinition.class),
        @XmlElement(name = "restBinding", type = RestBindingDefinition.class)
    })
    protected List<ProcessorDefinition> onExceptionOrWhenOrOnCompletion;
    @XmlAttribute(name = "parallelProcessing")
    protected Boolean parallelProcessing;
    @XmlAttribute(name = "optimisticLocking")
    protected Boolean optimisticLocking;
    @XmlAttribute(name = "executorServiceRef")
    protected String executorServiceRef;
    @XmlAttribute(name = "timeoutCheckerExecutorServiceRef")
    protected String timeoutCheckerExecutorServiceRef;
    @XmlAttribute(name = "aggregationRepositoryRef")
    protected String aggregationRepositoryRef;
    @XmlAttribute(name = "strategyRef")
    protected String strategyRef;
    @XmlAttribute(name = "strategyMethodName")
    protected String strategyMethodName;
    @XmlAttribute(name = "strategyMethodAllowNull")
    protected Boolean strategyMethodAllowNull;
    @XmlAttribute(name = "completionSize")
    protected Integer completionSizeAttr;
    @XmlAttribute(name = "completionInterval")
    protected Long completionInterval;
    @XmlAttribute(name = "completionTimeout")
    protected Long completionTimeoutAttr;
    @XmlAttribute(name = "completionFromBatchConsumer")
    protected Boolean completionFromBatchConsumer;
    @XmlAttribute(name = "groupExchanges")
    protected Boolean groupExchanges;
    @XmlAttribute(name = "eagerCheckCompletion")
    protected Boolean eagerCheckCompletion;
    @XmlAttribute(name = "ignoreInvalidCorrelationKeys")
    protected Boolean ignoreInvalidCorrelationKeys;
    @XmlAttribute(name = "closeCorrelationKeyOnCompletion")
    protected Integer closeCorrelationKeyOnCompletion;
    @XmlAttribute(name = "discardOnCompletionTimeout")
    protected Boolean discardOnCompletionTimeout;
    @XmlAttribute(name = "forceCompletionOnStop")
    protected Boolean forceCompletionOnStop;

    /**
     * Gets the value of the correlationExpression property.
     * 
     * @return
     *     possible object is
     *     {@link ExpressionSubElementDefinition }
     *     
     */
    public ExpressionSubElementDefinition getCorrelationExpression() {
        return correlationExpression;
    }

    /**
     * Sets the value of the correlationExpression property.
     * 
     * @param value
     *     allowed object is
     *     {@link ExpressionSubElementDefinition }
     *     
     */
    public void setCorrelationExpression(ExpressionSubElementDefinition value) {
        this.correlationExpression = value;
    }

    /**
     * Gets the value of the completionPredicate property.
     * 
     * @return
     *     possible object is
     *     {@link ExpressionSubElementDefinition }
     *     
     */
    public ExpressionSubElementDefinition getCompletionPredicate() {
        return completionPredicate;
    }

    /**
     * Sets the value of the completionPredicate property.
     * 
     * @param value
     *     allowed object is
     *     {@link ExpressionSubElementDefinition }
     *     
     */
    public void setCompletionPredicate(ExpressionSubElementDefinition value) {
        this.completionPredicate = value;
    }

    /**
     * Gets the value of the completionTimeout property.
     * 
     * @return
     *     possible object is
     *     {@link ExpressionSubElementDefinition }
     *     
     */
    public ExpressionSubElementDefinition getCompletionTimeout() {
        return completionTimeout;
    }

    /**
     * Sets the value of the completionTimeout property.
     * 
     * @param value
     *     allowed object is
     *     {@link ExpressionSubElementDefinition }
     *     
     */
    public void setCompletionTimeout(ExpressionSubElementDefinition value) {
        this.completionTimeout = value;
    }

    /**
     * Gets the value of the completionSize property.
     * 
     * @return
     *     possible object is
     *     {@link ExpressionSubElementDefinition }
     *     
     */
    public ExpressionSubElementDefinition getCompletionSize() {
        return completionSize;
    }

    /**
     * Sets the value of the completionSize property.
     * 
     * @param value
     *     allowed object is
     *     {@link ExpressionSubElementDefinition }
     *     
     */
    public void setCompletionSize(ExpressionSubElementDefinition value) {
        this.completionSize = value;
    }

    /**
     * Gets the value of the optimisticLockRetryPolicy property.
     * 
     * @return
     *     possible object is
     *     {@link OptimisticLockRetryPolicyDefinition }
     *     
     */
    public OptimisticLockRetryPolicyDefinition getOptimisticLockRetryPolicy() {
        return optimisticLockRetryPolicy;
    }

    /**
     * Sets the value of the optimisticLockRetryPolicy property.
     * 
     * @param value
     *     allowed object is
     *     {@link OptimisticLockRetryPolicyDefinition }
     *     
     */
    public void setOptimisticLockRetryPolicy(OptimisticLockRetryPolicyDefinition value) {
        this.optimisticLockRetryPolicy = value;
    }

    /**
     * Gets the value of the onExceptionOrWhenOrOnCompletion property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the onExceptionOrWhenOrOnCompletion property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getOnExceptionOrWhenOrOnCompletion().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link OnExceptionDefinition }
     * {@link WhenDefinition }
     * {@link OnCompletionDefinition }
     * {@link InterceptDefinition }
     * {@link InterceptFromDefinition }
     * {@link InterceptSendToEndpointDefinition }
     * {@link ToDefinition }
     * {@link RouteDefinition }
     * {@link AopDefinition }
     * {@link AggregateDefinition }
     * {@link BeanDefinition }
     * {@link CatchDefinition }
     * {@link ChoiceDefinition }
     * {@link OtherwiseDefinition }
     * {@link ConvertBodyDefinition }
     * {@link DelayDefinition }
     * {@link DynamicRouterDefinition }
     * {@link EnrichDefinition }
     * {@link FilterDefinition }
     * {@link FinallyDefinition }
     * {@link IdempotentConsumerDefinition }
     * {@link InOnlyDefinition }
     * {@link InOutDefinition }
     * {@link LoadBalanceDefinition }
     * {@link LogDefinition }
     * {@link LoopDefinition }
     * {@link MarshalDefinition }
     * {@link MulticastDefinition }
     * {@link PipelineDefinition }
     * {@link PolicyDefinition }
     * {@link PollEnrichDefinition }
     * {@link ProcessDefinition }
     * {@link RecipientListDefinition }
     * {@link RemoveHeaderDefinition }
     * {@link RemoveHeadersDefinition }
     * {@link RemovePropertyDefinition }
     * {@link ResequenceDefinition }
     * {@link RollbackDefinition }
     * {@link RoutingSlipDefinition }
     * {@link SamplingDefinition }
     * {@link SetBodyDefinition }
     * {@link SetExchangePatternDefinition }
     * {@link SetFaultBodyDefinition }
     * {@link SetHeaderDefinition }
     * {@link SetOutHeaderDefinition }
     * {@link SetPropertyDefinition }
     * {@link SortDefinition }
     * {@link SplitDefinition }
     * {@link StopDefinition }
     * {@link ThreadsDefinition }
     * {@link ThrottleDefinition }
     * {@link ThrowExceptionDefinition }
     * {@link TransactedDefinition }
     * {@link TransformDefinition }
     * {@link TryDefinition }
     * {@link UnmarshalDefinition }
     * {@link ValidateDefinition }
     * {@link WireTapDefinition }
     * {@link RestBindingDefinition }
     * 
     * 
     */
    public List<ProcessorDefinition> getOnExceptionOrWhenOrOnCompletion() {
        if (onExceptionOrWhenOrOnCompletion == null) {
            onExceptionOrWhenOrOnCompletion = new ArrayList<ProcessorDefinition>();
        }
        return this.onExceptionOrWhenOrOnCompletion;
    }

    /**
     * Gets the value of the parallelProcessing property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isParallelProcessing() {
        return parallelProcessing;
    }

    /**
     * Sets the value of the parallelProcessing property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setParallelProcessing(Boolean value) {
        this.parallelProcessing = value;
    }

    /**
     * Gets the value of the optimisticLocking property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isOptimisticLocking() {
        return optimisticLocking;
    }

    /**
     * Sets the value of the optimisticLocking property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setOptimisticLocking(Boolean value) {
        this.optimisticLocking = value;
    }

    /**
     * Gets the value of the executorServiceRef property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getExecutorServiceRef() {
        return executorServiceRef;
    }

    /**
     * Sets the value of the executorServiceRef property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setExecutorServiceRef(String value) {
        this.executorServiceRef = value;
    }

    /**
     * Gets the value of the timeoutCheckerExecutorServiceRef property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTimeoutCheckerExecutorServiceRef() {
        return timeoutCheckerExecutorServiceRef;
    }

    /**
     * Sets the value of the timeoutCheckerExecutorServiceRef property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTimeoutCheckerExecutorServiceRef(String value) {
        this.timeoutCheckerExecutorServiceRef = value;
    }

    /**
     * Gets the value of the aggregationRepositoryRef property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAggregationRepositoryRef() {
        return aggregationRepositoryRef;
    }

    /**
     * Sets the value of the aggregationRepositoryRef property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAggregationRepositoryRef(String value) {
        this.aggregationRepositoryRef = value;
    }

    /**
     * Gets the value of the strategyRef property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getStrategyRef() {
        return strategyRef;
    }

    /**
     * Sets the value of the strategyRef property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setStrategyRef(String value) {
        this.strategyRef = value;
    }

    /**
     * Gets the value of the strategyMethodName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getStrategyMethodName() {
        return strategyMethodName;
    }

    /**
     * Sets the value of the strategyMethodName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setStrategyMethodName(String value) {
        this.strategyMethodName = value;
    }

    /**
     * Gets the value of the strategyMethodAllowNull property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isStrategyMethodAllowNull() {
        return strategyMethodAllowNull;
    }

    /**
     * Sets the value of the strategyMethodAllowNull property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setStrategyMethodAllowNull(Boolean value) {
        this.strategyMethodAllowNull = value;
    }

    /**
     * Gets the value of the completionSizeAttr property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getCompletionSizeAttr() {
        return completionSizeAttr;
    }

    /**
     * Sets the value of the completionSizeAttr property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setCompletionSizeAttr(Integer value) {
        this.completionSizeAttr = value;
    }

    /**
     * Gets the value of the completionInterval property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    public Long getCompletionInterval() {
        return completionInterval;
    }

    /**
     * Sets the value of the completionInterval property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setCompletionInterval(Long value) {
        this.completionInterval = value;
    }

    /**
     * Gets the value of the completionTimeoutAttr property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    public Long getCompletionTimeoutAttr() {
        return completionTimeoutAttr;
    }

    /**
     * Sets the value of the completionTimeoutAttr property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setCompletionTimeoutAttr(Long value) {
        this.completionTimeoutAttr = value;
    }

    /**
     * Gets the value of the completionFromBatchConsumer property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isCompletionFromBatchConsumer() {
        return completionFromBatchConsumer;
    }

    /**
     * Sets the value of the completionFromBatchConsumer property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setCompletionFromBatchConsumer(Boolean value) {
        this.completionFromBatchConsumer = value;
    }

    /**
     * Gets the value of the groupExchanges property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isGroupExchanges() {
        return groupExchanges;
    }

    /**
     * Sets the value of the groupExchanges property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setGroupExchanges(Boolean value) {
        this.groupExchanges = value;
    }

    /**
     * Gets the value of the eagerCheckCompletion property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isEagerCheckCompletion() {
        return eagerCheckCompletion;
    }

    /**
     * Sets the value of the eagerCheckCompletion property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setEagerCheckCompletion(Boolean value) {
        this.eagerCheckCompletion = value;
    }

    /**
     * Gets the value of the ignoreInvalidCorrelationKeys property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isIgnoreInvalidCorrelationKeys() {
        return ignoreInvalidCorrelationKeys;
    }

    /**
     * Sets the value of the ignoreInvalidCorrelationKeys property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setIgnoreInvalidCorrelationKeys(Boolean value) {
        this.ignoreInvalidCorrelationKeys = value;
    }

    /**
     * Gets the value of the closeCorrelationKeyOnCompletion property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getCloseCorrelationKeyOnCompletion() {
        return closeCorrelationKeyOnCompletion;
    }

    /**
     * Sets the value of the closeCorrelationKeyOnCompletion property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setCloseCorrelationKeyOnCompletion(Integer value) {
        this.closeCorrelationKeyOnCompletion = value;
    }

    /**
     * Gets the value of the discardOnCompletionTimeout property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isDiscardOnCompletionTimeout() {
        return discardOnCompletionTimeout;
    }

    /**
     * Sets the value of the discardOnCompletionTimeout property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setDiscardOnCompletionTimeout(Boolean value) {
        this.discardOnCompletionTimeout = value;
    }

    /**
     * Gets the value of the forceCompletionOnStop property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isForceCompletionOnStop() {
        return forceCompletionOnStop;
    }

    /**
     * Sets the value of the forceCompletionOnStop property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setForceCompletionOnStop(Boolean value) {
        this.forceCompletionOnStop = value;
    }

}
